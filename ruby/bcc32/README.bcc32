=begin

= How to build ruby using Borland C++

== Requirement

(1) Borland C++ 5.0 or later.

(2) If you want to run `((%make clean%))' or `((%make distclean%))'
    properly, you must install UNIX compatible `((%rm%))' command on
    your ((|PATH|)).

(3) Please set environment variable (({INCLUDE})), (({LIB})), (({PATH}))
    to run required commands properly from the command line.

    Note: building ruby requires following commands.
     * make
     * bcc
     * tlib
     * ilink

== How to compile and install

(1) Execute bcc32\configure.bat on your build directory.
     ex. c:\ruby-1.6.7>bcc32\configure.bat
     
(2) Change ((|RUBY_INSTALL_NAME|)) and ((|RUBY_SO_NAME|)) in (({Makefile}))
    if you want to change the name of the executable files. 
    And add ((|RUBYW_INSTALL_NAME|)) to change the name of the
    executable without console window if also you want.

(3) Run `((%make%))'

(4) Run `((%make test%))'

(5) Run `((%make DESTDIR=<install_directory> install%))'

    This command will create following directories and install files onto them.
      * <install_directory>\bin
      * <install_directory>\lib
      * <install_directory>\lib\ruby
      * <install_directory>\lib\ruby\<MAJOR>.<MINOR>
      * <install_directory>\lib\ruby\<MAJOR>.<MINOR>\<PLATFORM>
      * <install_directory>\lib\ruby\site_ruby
      * <install_directory>\lib\ruby\site_ruby\<MAJOR>.<MINOR>
      * <install_directory>\lib\ruby\site_ruby\<MAJOR>.<MINOR>\<PLATFORM>
      * <install_directory>\man\man1
    If Ruby's version is `x.y.z', the ((|<MAJOR>|)) is `x' and the ((|<MINOR>|)) is `y'.
    The ((|<PLATFORM>|)) is usually `(({i586-bccwin32}))'.

== Icons

Any icon files(*.ico) in the build directory, directories specified with
((|icondirs|)) make variable and (({win32})) directory under the ruby
source directory will be included in DLL or executable files, according
to their base names.
    $(RUBY_INSTALL_NAME).ico or ruby.ico   --> $(RUBY_INSTALL_NAME).exe
    $(RUBYW_INSTALL_NAME).ico or rubyw.ico --> $(RUBYW_INSTALL_NAME).exe
    the others                             --> $(RUBY_SO_NAME).dll

Although no icons are distributed with the ruby source or in the official 
site, you can use anything you like. For example, followings are written 
in Japanese, but you can download at least.

* ((<URL:http://member.nifty.ne.jp/ueivu/rubyico.html>)) or
  ((<zipped icons|URL:http://member.nifty.ne.jp/ueivu/Ruby_ico.zip>))
* ((<URL:http://homepage1.nifty.com/a_nakata/ruby/>)) or
  ((<icon itself|URL:http://homepage1.nifty.com/a_nakata/ruby/RubyIcon.ico>))

== Build examples

* Build on the ruby source directory.

  ex.)
    ruby source directory:  C:\ruby
    build directory:        C:\ruby
    install directory:      C:\usr\local

    C:
    cd \ruby
    bcc32\configure
    make
    make test
    make DESTDIR=/usr/local install

* Build on the relative directory from the ruby source directory and CPU type 
  i386.

  ex.)
    ruby source directory:  C:\ruby
    build directory:        C:\ruby\bccwin32
    install directory:      C:\usr\local
    CPU                     i386
    
    C:
    cd \ruby
    mkdir bccwin32
    cd bccwin32
    ..\bcc32\configure target i386-bccwin32
    make
    make test
    make DESTDIR=/usr/local install

* Build on the different drive.

  ex.)
    ruby source directory:  C:\src\ruby
    build directory:        D:\build\ruby
    install directory:      C:\usr\local

    D:
    cd D:\build\ruby
    C:\src\ruby\bcc32\configure
    make
    make test
    make DESTDIR=C:/usr/local install

== Bugs

You can ((*NOT*)) use a path name contains any white space characters as
the ruby source directory, this restriction comes from the behavior of
(({!INCLUDE})) directives of (({MAKE})).
((- you may call it a bug. -))

=end
