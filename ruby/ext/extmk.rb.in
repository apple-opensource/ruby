#! /usr/local/bin/ruby
# -*- ruby -*-

$".push 'mkmf.rb'
ORIG_LIBPATH = ENV['LIB']

if ARGV[0] == 'static'
  $force_static = true
  ARGV.shift
elsif ARGV[0] == 'install'
  $install = true
  $destdir = ARGV[1] || ''
  ARGV.shift
elsif ARGV[0] == 'clean'
  $clean = "clean"
  ARGV.shift
elsif ARGV[0] == 'distclean'
  $clean = "distclean"
  ARGV.shift
elsif ARGV[0] == 'realclean'
  $clean = "realclean"
  ARGV.shift
end

SRC_EXT = ["c", "cc", "m", "cxx", "cpp", "C"]
$extlist = []

$includedir = "@includedir@".gsub(/\$\{prefix\}|\$\(prefix\)/,'@prefix@')
$libdir = "@libdir@".gsub(/\$\{exec_prefix\}|\$\(exec_prefix\)/,'@exec_prefix@')

$top_srcdir = "@top_srcdir@"
if $top_srcdir !~ "^/"
  # get absolute path
  $top_srcdir = File.expand_path($top_srcdir)
end
# get absolute path
$topdir = File.expand_path("..")

$:.replace [$top_srcdir, $top_srcdir+"/lib", "."]

require 'find'

def rm_f(*files)
  targets = []
  for file in files
    targets.concat Dir[file]
  end
  if not targets.empty?
    File::chmod(0777, *targets)
    File::unlink(*targets)
  end
end

def older(file1, file2)
  if !File.exist?(file1) then
    return true
  end
  if !File.exist?(file2) then
    return false
  end
  if File.mtime(file1) < File.mtime(file2)
    return true
  end
  return false
end

if RUBY_PLATFORM == "m68k-human"
  CFLAGS = "@CFLAGS@".gsub(/-c..-stack=[0-9]+ */, '')
else
  CFLAGS = "@CFLAGS@"
end
if /mswin32/ =~ RUBY_PLATFORM
  OUTFLAG = '-Fe'
else
  OUTFLAG = '-o '
end
LINK = "@CC@ #{OUTFLAG}conftest -I#$topdir -I#$top_srcdir #{CFLAGS} -I#$includedir -L#$libdir @LDFLAGS@ %s %s %s conftest.c %s %s @LIBS@"
CPP = "@CPP@ @CPPFLAGS@ -I#$topdir -I#$top_srcdir #{CFLAGS} -I#$includedir %s %s %s conftest.c"

$log = open('extmk.log', 'w')

$orgerr = $stderr.dup
$orgout = $stdout.dup
def xsystem command
  if $DEBUG
    puts command
    return system(command)
  end
  $stderr.reopen($log) 
  $stdout.reopen($log) 
  puts command
  r = system(command)
  $stderr.reopen($orgerr)
  $stdout.reopen($orgout)
  return r
end

def try_link0(src, opt="")
  cfile = open("conftest.c", "w")
  cfile.print src
  cfile.close
  ldflags = $LDFLAGS
  if /mswin32/ =~ RUBY_PLATFORM and !$LIBPATH.empty?
    ENV['LIB'] = ($LIBPATH + [ORIG_LIBPATH]).compact.join(';')
  else
    $LDFLAGS = ldflags.dup
    $LIBPATH.each {|d| $LDFLAGS << " -L" + d}
  end
  begin
    xsystem(format(LINK, $CFLAGS, $CPPFLAGS, $LDFLAGS, opt, $LOCAL_LIBS))
  ensure
    $LDFLAGS = ldflags
    ENV['LIB'] = ORIG_LIBPATH if /mswin32/ =~ RUBY_PLATFORM
  end
end

def try_link(src, opt="")
  begin
    try_link0(src, opt)
  ensure
    rm_f "conftest*"
  end
end

def try_cpp(src, opt="")
  cfile = open("conftest.c", "w")
  cfile.print src
  cfile.close
  begin
    xsystem(format(CPP, $CFLAGS, $CPPFLAGS, opt))
  ensure
    rm_f "conftest*"
  end
end

def egrep_cpp(pat, src, opt="")
  cfile = open("conftest.c", "w")
  cfile.print src
  cfile.close
  begin
    xsystem(format(CPP+"|egrep #{pat}", $CFLAGS, $CPPFLAGS, opt))
  ensure
    rm_f "conftest*"
  end
end

def try_run(src, opt="")
  begin
    if try_link0(src, opt)
      if xsystem("./conftest")
	true
      else
	false
      end
    else
      nil
    end
  ensure
    rm_f "conftest*"
  end
end

def install_rb(mfile, srcdir = nil)
  libdir = "lib"
  libdir = srcdir + "/" + libdir if srcdir
  path = []
  dir = []
  if File.directory? libdir
    Find.find(libdir) do |f|
      next unless /\.rb$/ =~ f
      f = f[libdir.length+1..-1]
      path.push f
      dir |= [File.dirname(f)]
    end
  end
  for f in dir
    if f == "."
      mfile.print "\t@$(RUBY) -r ftools -e 'File::makedirs(*ARGV)' $(DESTDIR)$(pkglibdir)$(target_prefix)\n"
    else
      mfile.printf "\t@$(RUBY) -r ftools -e 'File::makedirs(*ARGV)' $(DESTDIR)$(pkglibdir)$(target_prefix)/%s\n", f
    end
  end
  for f in path
    mfile.printf "\t@$(RUBY) -r ftools -e 'File::install(ARGV[0], ARGV[1], 0644, true)' $(srcdir)/lib/%s $(DESTDIR)$(pkglibdir)$(target_prefix)/%s\n", f, f
  end
end

def append_library(libs, lib)
  if /mswin32/ =~ RUBY_PLATFORM
    lib + ".lib " + libs
  else
    "-l" + lib + " " + libs
  end
end

def have_library(lib, func="main")
  if func && func != ""
    libs = append_library($libs, lib)
    if /mswin32|mingw/ =~ RUBY_PLATFORM
      return true if lib == 'm'
      r = try_link(<<"SRC", libs)
#include <windows.h>
#include <winsock.h>
int main() { return 0; }
int t() { #{func}(); return 0; }
SRC
      unless r
        r = try_link(<<"SRC", libs)
#include <windows.h>
#include <winsock.h>
int main() { return 0; }
int t() { void ((*p)()); p = (void ((*)()))#{func}; return 0; }
SRC
      end
    else
      r = try_link(<<"SRC", libs)
int main() { return 0; }
int t() { #{func}(); return 0; }
SRC
    end
    unless r
      return false
    end
  else
    libs = append_library($libs, lib)
  end

  $libs = libs
  return true
end

def find_library(lib, func, *paths)
  libpath = $LIBPATH
  libs = append_library($libs, lib)
  until try_link(<<"SRC", libs)
int main() { return 0; }
int t() { #{func}(); return 0; }
SRC
    if paths.size == 0
      $LIBPATH = libpath
      return false
    end
    $LIBPATH = libpath | [paths.shift]
  end
  $libs = libs
  return true
end

def have_func(func, header=nil)
  libs = $libs
  src = 
    if /mswin32|mingw/ =~ RUBY_PLATFORM
      r = <<"SRC"
#include <windows.h>
#include <winsock.h>
SRC
    else
      ""
    end
  unless header.nil?
  src << <<"SRC"
#include <#{header}>
SRC
  end
  r = try_link(src + <<"SRC", libs)
int main() { return 0; }
int t() { #{func}(); return 0; }
SRC
  unless r
    r = try_link(src + <<"SRC", libs)
int main() { return 0; }
int t() { void ((*p)()); p = (void ((*)()))#{func}; return 0; }
SRC
  end
  unless r
    return false
  end
  $defs.push(format("-DHAVE_%s", func.upcase))
  return true
end

def have_header(header)
  unless try_cpp(<<"SRC")
#include <#{header}>
SRC
    return false
  end
  header.tr!("a-z./\055", "A-Z___")
  $defs.push(format("-DHAVE_%s", header))
  return true
end

def arg_config(config, default=nil)
  unless defined? $configure_args
    $configure_args = {}
    args = "@configure_args@"
    if /mswin32|mingw/ =~ RUBY_PLATFORM and ENV["CONFIGURE_ARGS"]
      args << " " << ENV["CONFIGURE_ARGS"]
    end
    for arg in args.split
      next unless /^--/ =~ arg
      if /=/ =~ arg
	$configure_args[$`] = $'
      else
	$configure_args[arg] = true
      end
    end
  end
  $configure_args.fetch(config, default)
end

def with_config(config, default=nil)
  unless /^--with-/ =~ config
    config = '--with-' + config
  end
  arg_config(config, default)
end

def enable_config(config, default=nil)
  if arg_config("--enable-"+config, default)
    true
  elsif arg_config("--disable-"+config, false)
    false
  else
    default
  end
end

def create_header()
  if $defs.length > 0
    hfile = open("extconf.h", "w")
    for line in $defs
      line =~ /^-D(.*)/
      hfile.printf "#define %s 1\n", $1
    end
    hfile.close
  end
end

def dir_config(target, idefault=nil, ldefault=nil)
  if idefault && ldefault == nil
    default = idefault
    idefault = default + "/include"
    ldefault = default + "/lib"
  end

  dir = with_config(target + "-dir", default)

  idir, ldir = if dir then [
      dir + "/include",
      dir + "/lib"
    ] else [
      with_config(target + "-include", idefault),
      with_config(target + "-lib", ldefault)
    ] end

  if idir
    idircflag = "-I" + idir
    $CPPFLAGS += " " + idircflag unless $CPPFLAGS.split.include?(idircflag)
  end

  if ldir
    $LIBPATH << ldir unless $LIBPATH.include?(ldir)
  end

  [idir, ldir]
end

def create_makefile(target)
  $target = target
  if target.include?('/')
    target_prefix, target = File.split(target)
    target_prefix[0,0] = '/'
  else
    target_prefix = ""
  end
  rm_f "conftest*"
  if "@DLEXT@" == $OBJEXT
    libs = $libs.split
    for lib in libs
      lib.sub!(/-l(.*)/, %%"lib\\1.#{$LIBEXT}"%)
    end
    $defs.push(format("-DEXTLIB='%s'", libs.join(",")))
  end

  $DLDFLAGS = '@DLDFLAGS@'

  if $configure_args['--enable-shared'] or "@LIBRUBY@" != "@LIBRUBY_A@"
    $libs = "@LIBRUBYARG@ " + $libs
    $LIBPATH.unshift $topdir
  end

  defflag = ''
  if RUBY_PLATFORM =~ /cygwin|mingw/ and not $static
    if not File.exist? target + '.def'
      open(target + '.def', 'wb') do |f|
        f.print "EXPORTS\n", "Init_", target, "\n"
      end
    end
    defflag = "--def=" + target + ".def"
  end

  if RUBY_PLATFORM =~ /mswin32/
    libpath = $LIBPATH.join(';')
  else
    $LIBPATH.each {|d| $DLDFLAGS << " -L" << d}
    if /netbsdelf/ =~ RUBY_PLATFORM
      $LIBPATH.each {|d| $DLDFLAGS << " -Wl,-R" + d unless d == $topdir}
    end
  end

  $srcdir = $top_srcdir + "/ext/" + $mdir
  mfile = open("Makefile", "w")
  mfile.binmode if /mingw/ =~ RUBY_PLATFORM
  mfile.printf "\
SHELL = /bin/sh

#### Start of system configuration section. ####

srcdir = #{$srcdir}
VPATH = #{$srcdir}

topdir = #{$topdir}
hdrdir = #{$top_srcdir}

CC = @CC@

CFLAGS   = %s #{CFLAGS} #$CFLAGS
CPPFLAGS = -I$(topdir) -I$(hdrdir) -I@includedir@ %s #$CPPFLAGS
DLDFLAGS = #$DLDFLAGS #$LDFLAGS
LDSHARED = @LDSHARED@ #{defflag}
", if $static then "" else "@CCDLFLAGS@" end, $defs.join(" ")
  mfile.puts "LIBPATH = #{libpath}" if libpath

  mfile.puts ".SUFFIXES: .@OBJEXT@" unless "@OBJEXT@" == "o"

  mfile.printf "\

RUBY_INSTALL_NAME = @RUBY_INSTALL_NAME@
RUBY_SO_NAME = @RUBY_SO_NAME@

prefix = @prefix@
exec_prefix = @exec_prefix@
libdir = @libdir@
#pkglibdir = $(libdir)/$(RUBY_INSTALL_NAME)/@MAJOR@.@MINOR@
pkglibdir = $(libdir)/ruby/@MAJOR@.@MINOR@
archdir = $(pkglibdir)/@arch@
target_prefix = #{target_prefix}
@SET_MAKE@

#### End of system configuration section. ####

"
  mfile.printf "LOCAL_LIBS = %s %s\n", $LOCAL_LIBS, $local_flags
  mfile.printf "LIBS = -L%s %s\n", $libdir, $libs
  mfile.printf "OBJS = "
  if !$objs then
    $objs = []
    for f in Dir["#{$top_srcdir}/ext/#{$mdir}/*.{#{SRC_EXT.join(%q{,})}}"]
      f = File.basename(f)
      f.sub!(/(#{SRC_EXT.join(%q{|})})$/, $OBJEXT)
      $objs.push f
    end
  else
    for i in $objs
      i.sub!(/\.o\z/, ".#{$OBJEXT}")
    end
  end
  mfile.printf $objs.join(" ")
  mfile.printf "\n"

  ruby_interpreter = "$(topdir)/miniruby@EXEEXT@"
  if /nmake/i =~ $make
    ruby_interpreter = '$(topdir:/=\)\miniruby@EXEEXT@'
  end
  if defined? CROSS_COMPILING
    ruby_interpreter = "@MINIRUBY@"
  end

  mfile.printf <<EOS
TARGET = #{target}
DLLIB = $(TARGET).#{$static ? $LIBEXT : "@DLEXT@"}

RUBY = #{ruby_interpreter} -I$(topdir) -I$(hdrdir)/lib
RM = $(RUBY) -rftools -e "File::rm_f(*ARGV.map{|x|Dir[x]}.flatten.uniq)"

EXEEXT = @EXEEXT@

all:		$(DLLIB)

clean:;		@$(RM) *.#{$OBJEXT} *.so *.sl *.#{$LIBEXT} $(DLLIB)
		@$(RM) *.ilk *.exp *.pdb *.bak $(CLEANFILES)

distclean:	clean
		@$(RM) Makefile extconf.h conftest.*
		@$(RM) core ruby$(EXEEXT) *~ $(DISTCLEANFILES)

realclean:	distclean
EOS

  mfile.printf <<EOS

install:
	@$(RUBY) -r ftools -e 'File::makedirs(*ARGV)' $(DESTDIR)$(libdir) $(DESTDIR)$(pkglibdir) $(DESTDIR)$(archdir)$(target_prefix)

EOS
  unless $static
    mfile.printf "\
	@$(RUBY) -r ftools -e 'File::install(ARGV[0], ARGV[1], 0555, true)' $(DLLIB) $(DESTDIR)$(archdir)$(target_prefix)/$(DLLIB)
"
  end
  install_rb(mfile, $srcdir)
  mfile.printf "\n"

  unless /nmake/i =~ $make
    unless /mswin32/ =~ RUBY_PLATFORM
      src = '$<'
    else
      src = '$(subst /,\\\\,$<)'
    end
    mfile.puts "
.cc.@OBJEXT@:
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{src}
.cpp.@OBJEXT@:
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{src}
.cxx.@OBJEXT@:
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{src}
.C.@OBJEXT@:
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c #{src}

.c.@OBJEXT@:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c #{src}
"
  else
    mfile.print "
{$(srcdir)}.c{}.@OBJEXT@:
	$(CC) -I. -I$(<D) $(CFLAGS) $(CPPFLAGS) -c $(<:/=\\)
.c.@OBJEXT@:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $(<:/=\\)

{$(srcdir)}.cc{}.@OBJEXT@:
	$(CXX) -I. -I$(<D) $(CXXFLAGS) $(CPPFLAGS) -c $(<:/=\\)
.cc.@OBJEXT@:
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(<:/=\\)
{$(srcdir)}.cpp{}.@OBJEXT@:
	$(CXX) -I. -I$(<D) $(CXXFLAGS) $(CPPFLAGS) -c $(<:/=\\)
.cpp.@OBJEXT@:
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(<:/=\\)
{$(srcdir)}.cxx{}.@OBJEXT@:
	$(CXX) -I. -I$(<D) $(CXXFLAGS) $(CPPFLAGS) -c $(<:/=\\)
.cxx.@OBJEXT@:
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(<:/=\\)
"
  end

  if $static
    if "@AR@" =~ /^lib\b/i
      mfile.printf "\
$(DLLIB): $(OBJS)
	@AR@ /OUT:$(DLLIB) $(OBJS)
"
    else
      mfile.printf "\
$(DLLIB): $(OBJS)
	@AR@ cru $(DLLIB) $(OBJS)
	@-@RANLIB@ $(DLLIB) 2> /dev/null || true
"
    end
  elsif "@DLEXT@" != $OBJEXT
    mfile.print "$(DLLIB): $(OBJS)\n"
    if /mswin32/ =~ RUBY_PLATFORM
      if /nmake/i =~ $make
	mfile.print "\tset LIB=$(LIBPATH:/=\\);$(LIB)\n"
      else
	mfile.print "\tenv LIB='$(subst /,\\\\,$(LIBPATH));$(LIB)' \\\n"
      end
    end
    mfile.print "\t$(LDSHARED) $(DLDFLAGS) #{OUTFLAG}$(DLLIB) $(OBJS) $(LIBS) $(LOCAL_LIBS)\n"
  elsif RUBY_PLATFORM == "m68k-human"
    mfile.printf "\
$(DLLIB): $(OBJS)
	ar cru $(DLLIB) $(OBJS)
"
  else
    mfile.printf "\
$(DLLIB): $(OBJS)
	ld $(DLDFLAGS) -r -o $(DLLIB) $(OBJS)
"
  end

  if File.exist?("#{$srcdir}/depend")
    dfile = open("#{$srcdir}/depend", "r")
    mfile.printf "###\n"
    while line = dfile.gets()
      line.gsub!(/\.o\b/, ".#{$OBJEXT}")
      line.gsub!(/(\s)([^\s\/]+\.[ch])/, '\1$(srcdir)/\2') if /nmake/i =~ $make
      mfile.printf "%s", line.gsub('\$\(hdrdir\)/config.h', '$(topdir)/config.h')
    end
    dfile.close
  end
  mfile.close
end

def extmake(target)
  if $force_static or $static_ext[target]
    $static = target
  else
    $static = false
  end

  unless $install or $clean
    return if $nodynamic and not $static
  end

  $OBJEXT = "@OBJEXT@"
  $LIBEXT = "a"
  $objs = nil
  $libs = "@DLDLIBS@"
  $local_flags = ""
  if /mswin32/ =~ RUBY_PLATFORM
    $LIBEXT = "lib"
    $local_flags = "-link /INCREMENTAL:no /EXPORT:Init_$(TARGET)"
  end
  $LOCAL_LIBS = ""		# to be assigned in extconf.rb
  $CFLAGS = ""
  $CPPFLAGS = ""
  $LDFLAGS = ""
  $LIBPATH = []

  dir_config("opt")

  begin
    dir = Dir.pwd
    Dir.mkdir target unless File.directory?(target)
    Dir.chdir target
    $target = target
    $mdir = target
    unless $install or $clean
      if $static_ext.size > 0 ||
	!File.exist?("./Makefile") ||
	older("./Makefile", "#{$top_srcdir}/ext/@setup@") ||
	older("./Makefile", "#{$topdir}/ext/extmk.rb") ||
	older("./Makefile", "#{$top_srcdir}/ext/#{target}/makefile.rb") ||
	older("./Makefile", "#{$top_srcdir}/ext/#{target}/extconf.rb")
      then
	$defs = []
	if File.exist?("#{$top_srcdir}/ext/#{target}/makefile.rb")
	  load "#{$top_srcdir}/ext/#{target}/makefile.rb"
	elsif File.exist?("#{$top_srcdir}/ext/#{target}/extconf.rb")
	  load "#{$top_srcdir}/ext/#{target}/extconf.rb"
	else
	  create_makefile(target)
	end
      end
    end
    if File.exist?("./Makefile")
      if $static
 	$extlist.push [$static, File.basename($target)]
      end
      if $install
	system "#{$make} install DESTDIR=#{$destdir}"
      elsif $clean
	system "#{$make} #{$clean}"
      else
	unless system "#{$make} all"
	  if ENV["MAKEFLAGS"] != "k" and ENV["MFLAGS"] != "-k"
	    exit
	  end
	end
      end
    end
    if $static
      $extlibs ||= ""
      $extlibs += " " + $LDFLAGS unless $LDFLAGS == ""
      $extlibs += " " + $libs unless $libs == ""
      $extlibs += " " + $LOCAL_LIBS unless $LOCAL_LIBS == ""
    end
  ensure
    rm_f "conftest*"
    Dir.chdir dir
  end
end

$make = ENV["MAKE"]
$make ||= with_config("make-prog", "make")

# get static-link modules
$static_ext = {}
for setup in ["@setup@", "#{$top_srcdir}/ext/@setup@"]
  if File.file? setup
    f = open(setup) 
    while line = f.gets()
      line.chomp!
      line.sub!(/#.*$/, '')
      next if /^\s*$/ =~ line
      if /^option +nodynamic/ =~ line
	$nodynamic = true
	next
      end
      target = line.split[0]
      target = target.downcase if /mswin32/ =~ RUBY_PLATFORM
      $static_ext[target] = true
    end
    f.close
    break
  end
end

ext_prefix = "#{$top_srcdir}/ext"
for d in Dir["#{ext_prefix}/**/*"]
  File.directory?(d) || next
  File.file?(d + "/MANIFEST") || next
  
  d.slice!(0, ext_prefix.length + 1)
  if $install
    print "installing ", d, "\n"
  elsif $clean
    print "cleaning ", d, "\n"
  else
    print "compiling ", d, "\n"
    if RUBY_PLATFORM =~ /-aix/ and older("../ruby.imp", "../miniruby")
      load "#{$top_srcdir}/ext/aix_mksym.rb"
    end
  end
  extmake(d)
end

if $install or $clean
  Dir.chdir ".."
  exit
end
$extinit = "" unless $extinit

ruby = "@RUBY_INSTALL_NAME@@EXEEXT@"
miniruby = "miniruby@EXEEXT@"

$extobjs = "" unless $extobjs
if $extlist.size > 0
  for s,t in $extlist
    f = format("%s/%s.%s", s, t, $LIBEXT)
    if File.exist?(f)
      $extinit += format("\
\tInit_%s();\n\
\trb_provide(\"%s.so\");\n\
", t, s)
      $extobjs += "ext/"
      $extobjs += f
      $extobjs += " "
    else
      false
    end
  end

  if older("extinit.c", "#{$top_srcdir}/ext/@setup@")
    f = open("extinit.c", "w")
    f.printf "void Init_ext() {\n"
    f.printf $extinit
    f.printf "}\n"
    f.close
  end
  if older("extinit.#{$OBJEXT}", "extinit.c")
    cmd = "@CC@ " + CFLAGS + " -c extinit.c"
    print cmd, "\n"
    system cmd or exit 1
  end

  Dir.chdir ".."

  if older(ruby, "#{$top_srcdir}/ext/@setup@") or older(ruby, miniruby)
    rm_f ruby
  end

  $extobjs = "ext/extinit.#{$OBJEXT} " + $extobjs
  if RUBY_PLATFORM =~ /m68k-human|beos/
    $extlibs.gsub!("-L/usr/local/lib", "") if $extlibs
  end
  system format(%[#{$make} #{ruby} EXTOBJS='%s' EXTLIBS='%s'], $extobjs, $extlibs)
else
  Dir.chdir ".."
  if older(ruby, miniruby)
    rm_f ruby
    system("#{$make} #{ruby}")
  end
end

#Local variables:
# mode: ruby
#end:
